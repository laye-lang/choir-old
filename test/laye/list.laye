int main() {
    list mut l;
    push(&l, 10);
    push(&l, 20);
    push(&l, 30);
    assert l.count == 3, "count should be 3";
    assert l.elements[0] == 10, "elements[0] != 10";
    assert l.elements[1] == 20, "elements[1] != 20";
    assert l.elements[2] == 30, "elements[2] != 30";
    return 0;
}

foreign callconv "c" int8 mut[*] malloc(int size);
foreign callconv "c" int8 mut[*] realloc(int8[*] memory, int size);
foreign callconv "c" void free(int8[*] memory);

struct list {
    int mut[*] elements;
    int count;
    int capacity;
}

void ensure_capacity(list mut* l, int min_capacity) {
    if (min_capacity <= 0) {
        min_capacity = 1;
    }

    if (l.capacity >= min_capacity) {
        return;
    }

    int new_capacity = l.capacity;
    if (l.capacity == 0) {
        if (min_capacity > 16) {
            new_capacity = min_capacity;
        } else {
            new_capacity = 16;
        }
    }

    while (new_capacity < min_capacity) {
        new_capacity = new_capacity * 2;
    }

    l.elements = cast(int mut[*]) realloc(cast(int8[*]) l.elements, new_capacity);
    l.capacity = new_capacity;
}

void push(list mut* l, int elem) {
    ensure_capacity(l, l.count + 1);
    assert l.elements != nil, "elements should not be nil";
    assert l.capacity > 0, "capacity should not be 0";
    assert l.capacity > l.count, "capacity should be greater than count";
    l.elements[l.count] = elem;
    l.count++;
}
